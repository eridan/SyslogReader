package syslogreader.ui;

import java.awt.Desktop;
import java.io.File;
import java.io.IOException;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JCheckBox;
import javax.swing.JToggleButton;
import javax.swing.table.DefaultTableModel;
import syslogreader.domain.SyslogData;
import syslogreader.domain.SyslogDataPortListener;
import syslogreader.util.SyslogDataFileWriter;

public class MainWindow extends javax.swing.JFrame {
    
    private DateFormat df = new SimpleDateFormat("DD-MMM-yyyy HH:mm:ss");
    private SyslogDataPortListener syslogListener;
    private int localPort;
    private SyslogDataFileWriter syslogDataFileWriter  = new SyslogDataFileWriter();;
    private File statHtmlFile;

    /**
     * Creates new form MainWindow
     */
    public MainWindow() {
        initComponents();
        try {
            this.statHtmlFile = this.syslogDataFileWriter.buildHTML_JSFiles();
        } catch (IOException ex) {
            addMsgToLiveTextArea("Could not build stat views. Stat Views will be unavailable");
            ex.printStackTrace();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuItem1 = new javax.swing.JMenuItem();
        toolBar = new javax.swing.JToolBar();
        stopBtn = new javax.swing.JButton();
        resumeBtn = new javax.swing.JButton();
        statBtn = new javax.swing.JButton();
        filteredViewTblScrollPane = new javax.swing.JScrollPane();
        filteredView = new javax.swing.JTable() {
            private static final long serialVersionUID = 1L;

            public boolean isCellEditable(int row, int column) {                
                return false;               
            }
        };
        filteredViewLabel = new javax.swing.JLabel();
        liveLabel = new javax.swing.JLabel();
        liveTextAreaScrollPane = new javax.swing.JScrollPane();
        liveTextArea = new javax.swing.JTextArea();
        applyFilterCheckBox = new javax.swing.JCheckBox();
        menuBar = new javax.swing.JMenuBar();
        preferencesMenu = new javax.swing.JMenu();
        statMenu = new javax.swing.JMenu();
        showHtml_mItem = new javax.swing.JMenuItem();
        aboutMenu = new javax.swing.JMenu();
        info_mItem = new javax.swing.JMenuItem();
        author_mItem = new javax.swing.JMenuItem();

        jMenuItem1.setText("jMenuItem1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Syslog Reader v 1.0");

        toolBar.setFloatable(false);
        toolBar.setRollover(true);

        stopBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/stop.png"))); // NOI18N
        stopBtn.setToolTipText("STOP");
        stopBtn.setFocusable(false);
        stopBtn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        stopBtn.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        stopBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopBtnActionPerformed(evt);
            }
        });
        toolBar.add(stopBtn);

        resumeBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/start.png"))); // NOI18N
        resumeBtn.setToolTipText("RESUME");
        resumeBtn.setFocusable(false);
        resumeBtn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        resumeBtn.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        resumeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resumeBtnActionPerformed(evt);
            }
        });
        toolBar.add(resumeBtn);

        statBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/statistics.png"))); // NOI18N
        statBtn.setToolTipText("STATISTICS");
        statBtn.setFocusable(false);
        statBtn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        statBtn.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        statBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                statBtnActionPerformed(evt);
            }
        });
        toolBar.add(statBtn);

        filteredView.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Date", "Protocol", "Local IP", "Local Port", "Dest IP", "Dest. Port", "Dest. Domain"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        filteredViewTblScrollPane.setViewportView(filteredView);

        filteredViewLabel.setText("Filtered View:");

        liveLabel.setText("LIVE");

        liveTextArea.setEditable(false);
        liveTextArea.setColumns(20);
        liveTextArea.setRows(5);
        liveTextAreaScrollPane.setViewportView(liveTextArea);

        applyFilterCheckBox.setSelected(true);
        applyFilterCheckBox.setText("Apply Filter");
        applyFilterCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                applyFilterCheckBoxActionPerformed(evt);
            }
        });

        preferencesMenu.setText("Preferences");
        menuBar.add(preferencesMenu);

        statMenu.setText("Statistics");

        showHtml_mItem.setText("Show HTML");
        showHtml_mItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showHtml_mItemActionPerformed(evt);
            }
        });
        statMenu.add(showHtml_mItem);

        menuBar.add(statMenu);

        aboutMenu.setText("About");

        info_mItem.setText("Info");
        aboutMenu.add(info_mItem);

        author_mItem.setText("Author");
        aboutMenu.add(author_mItem);

        menuBar.add(aboutMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(toolBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(filteredViewTblScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 600, Short.MAX_VALUE)
            .addComponent(liveTextAreaScrollPane)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(filteredViewLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(applyFilterCheckBox))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(liveLabel)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(toolBar, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(38, 38, 38)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(filteredViewLabel)
                    .addComponent(applyFilterCheckBox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(filteredViewTblScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 196, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(liveLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(liveTextAreaScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void showHtml_mItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showHtml_mItemActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_showHtml_mItemActionPerformed

    private void stopBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopBtnActionPerformed
        this.syslogListener.stopRequest();
        addMsgToLiveTextArea("Listener Suspended / Paused");
//        try {
//            InetAddress ia = InetAddress.getByName("194.186.36.190");   // utro.ru
//            
//            System.out.println(ia.getCanonicalHostName());
//            ia = InetAddress.getByName("91.190.216.51");   // facebook
//            System.out.println(ia.getCanonicalHostName());
//        } catch (UnknownHostException ex) {
//            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
//        }

    }//GEN-LAST:event_stopBtnActionPerformed

    private void applyFilterCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_applyFilterCheckBoxActionPerformed
        if(applyFilterCheckBox.isSelected()) {
            addMsgToLiveTextArea("Filter been applied to Filtered View");
        } else {
            addMsgToLiveTextArea("Filter was cleared");
        }
    }//GEN-LAST:event_applyFilterCheckBoxActionPerformed

    private void resumeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resumeBtnActionPerformed
        this.syslogListener = new SyslogDataPortListener(this, this.localPort);
        Thread t = new Thread(syslogListener);
        t.start();
        addMsgToLiveTextArea("Listener Resumed");
    }//GEN-LAST:event_resumeBtnActionPerformed

    private void statBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_statBtnActionPerformed
        if(this.statHtmlFile.exists()) {
            System.out.println("Opening HTML Stat File");
            try {
                Desktop.getDesktop().browse(this.statHtmlFile.toURI());
            } catch (IOException ex) {
                Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            System.out.println("Displaying Alert window");
        }
    }//GEN-LAST:event_statBtnActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu aboutMenu;
    private javax.swing.JCheckBox applyFilterCheckBox;
    private javax.swing.JMenuItem author_mItem;
    private javax.swing.JTable filteredView;
    private javax.swing.JLabel filteredViewLabel;
    private javax.swing.JScrollPane filteredViewTblScrollPane;
    private javax.swing.JMenuItem info_mItem;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JLabel liveLabel;
    private javax.swing.JTextArea liveTextArea;
    private javax.swing.JScrollPane liveTextAreaScrollPane;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenu preferencesMenu;
    private javax.swing.JButton resumeBtn;
    private javax.swing.JMenuItem showHtml_mItem;
    private javax.swing.JButton statBtn;
    private javax.swing.JMenu statMenu;
    private javax.swing.JButton stopBtn;
    private javax.swing.JToolBar toolBar;
    // End of variables declaration//GEN-END:variables

    private JToggleButton follow = new JToggleButton("Follow up");
    
    public void addMsgToLiveTextArea(String i) {
        i = i.replaceAll("\\n", "");
        i = i.replaceAll("\\t", "");
        liveTextArea.append(df.format(new Date()) + ": " + i + "\n");
        if (follow.isSelected()) {
            String s = liveTextArea.getText();
            int pos = s.length();
            liveTextArea.setCaretPosition(pos);
        }
    }
    
    public void addMsgToFilteredViewTable(SyslogData syslogData) {
        if(syslogData != null) {
            InetAddress ia = null;
        try {
            ia = InetAddress.getByName(syslogData.getRemoteIP());
            syslogData.setDomainName(ia.getCanonicalHostName());
        } catch (UnknownHostException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
            this.syslogDataFileWriter.saveLogDataToLocalFile(syslogData);
//            browsingHistory.put(syslogData.getLocalIP(), syslogData);
            DefaultTableModel tModel = (DefaultTableModel)filteredView.getModel();
            tModel.addRow(new Object[]{"", "", "", "", "", "", ""});
            int rowIndex = tModel.getRowCount()-1;
            //   "Date", "Protocol", "Local IP", "Local Port", "Dest IP", "Dest. Port"
            tModel.setValueAt(df.format(syslogData.getDate().getTime()), rowIndex, 0);
            tModel.setValueAt(syslogData.getProtocol(), rowIndex, 1);
            tModel.setValueAt(syslogData.getLocalIP(), rowIndex, 2);
            tModel.setValueAt(syslogData.getLocalPORT(), rowIndex, 3);
            tModel.setValueAt(syslogData.getRemoteIP(), rowIndex, 4);
            tModel.setValueAt(syslogData.getRemotePORT(), rowIndex, 5);
            tModel.setValueAt(syslogData.getDomainName(), rowIndex, 6);
        }
    }

    public JCheckBox getApplyFilterCheckBox() {
        return applyFilterCheckBox;
    }

    public void setSyslogListener(SyslogDataPortListener syslogListener) {
        this.syslogListener = syslogListener;
    }

    public void setListenerPort(int localPort) {
        this.localPort = localPort;
    }

    
    
}
